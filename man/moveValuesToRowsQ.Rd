% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rowscols.R
\name{moveValuesToRowsQ}
\alias{moveValuesToRowsQ}
\title{Map a set of columns to rows (query based).}
\usage{
moveValuesToRowsQ(controlTable, wideTableName, my_db, ...,
  columnsToCopy = NULL,
  tempNameGenerator = replyr::makeTempNameGenerator("mvtrq"),
  strict = FALSE, checkNames = TRUE, showQuery = FALSE,
  defaultValue = NULL)
}
\arguments{
\item{controlTable}{table specifying mapping (local data frame)}

\item{wideTableName}{name of table containing data to be mapped (db/Spark data)}

\item{my_db}{db handle}

\item{...}{force later arguments to be by name.}

\item{columnsToCopy}{character list of column names to copy}

\item{tempNameGenerator}{a tempNameGenerator from replyr::makeTempNameGenerator()}

\item{strict}{logical, if TRUE check control table contents for uniqueness}

\item{checkNames}{logical, if TRUE check names}

\item{showQuery}{if TRUE print query}

\item{defaultValue}{if not NULL literal to use for non-match values.}
}
\value{
long table built by mapping wideTable to one row per group
}
\description{
Transform data facts from columns into additional rows using SQL
and controlTable.
}
\details{
This is using the theory of "fluid data"n
(\url{https://github.com/WinVector/cdata}), which includes the
principle that each data cell has coordinates independent of the
storage details and storage detail dependent coordinates (usually
row-id, column-id, and group-id) can be re-derived at will (the
other principle is that there may not be "one true preferred data
shape" and many re-shapings of data may be needed to match data to
different algorithms and methods).

The controlTable defines the names of each data element in the two notations:
the notation of the tall table (which is row oriented)
and the notation of the wide table (which is column oriented).
controlTable[ , 1] (the group label) cross colnames(controlTable)
(the column labels) are names of data cells in the long form.
controlTable[ , 2:ncol(controlTable)] (column labels)
are names of data cells in the wide form.
To get behavior similar to tidyr::gather/spread one build the control table
by running an appropiate query over the data.

Some discussion and examples can be found here:
\url{https://winvector.github.io/replyr/articles/FluidData.html} and
here \url{https://github.com/WinVector/cdata}.
}
\examples{

my_db <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")

#' # un-pivot/tidyr::gather example
d <- data.frame(AUC= 0.6, R2= 0.2)
# cdata version
cdata::unpivotValuesToRows(d,
                        nameForNewKeyColumn= 'meas',
                        nameForNewValueColumn= 'val',
                        columnsToTakeFrom= c('AUC', 'R2'))
# tidyr version: tidyr::gather(d, key= 'meas', value = 'val')
# replyr moveValuesToRowsQ() version
dR <- replyr_copy_to(my_db, d, 'dR',
                     overwrite = TRUE, temporary = TRUE)
cT <- replyr::buildUnPivotControlTable(nameForNewKeyColumn= 'meas',
                                       nameForNewValueColumn= 'val',
                                       columnsToTakeFrom= c('AUC', 'R2'))
replyr::moveValuesToRowsQ(cT, 'dR', my_db)

# non-trivial example
wideTableName <- 'dat'
d <- dplyr::copy_to(my_db,
                    dplyr::tribble(
                      ~ID,          ~c1,          ~c2,          ~c3,
                      'id1', 'val_id1_c1', 'val_id1_c2', 'val_id1_c3',
                      'id2', 'val_id2_c1', 'val_id2_c2', 'val_id2_c3',
                      'id3', 'val_id3_c1', 'val_id3_c2', 'val_id3_c3' ),
                    wideTableName, overwrite = TRUE, temporary=TRUE)
controlTable <- dplyr::tribble(~group, ~col1, ~col2,
                               'aa',  'c1',  'c2',
                               'bb',  'c1',  'c3')
columnsToCopy <- 'ID'
moveValuesToRowsQ(controlTable,
                  wideTableName,
                  my_db,
                  columnsToCopy = columnsToCopy)



}
\seealso{
\code{\link[cdata]{unpivotValuesToRows}}, \code{\link{buildUnPivotControlTable}}, \code{\link{moveValuesToColumnsQ}}
}
